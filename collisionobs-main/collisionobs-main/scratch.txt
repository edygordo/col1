'''
X = np.zeros([7,1])
X[0:3] = np.reshape(collision.sat.r.value, (3,1))
X[3:6] = np.array([[0.00001], [0.00001], [0.00001]])
X[6] = 0.5

k = 0
for i in range(0,5):
    H = collision.jacobian(X)
    Z_cap = collision.collision_obs(X)
    rsdu = Z - Z_cap
    delX = inv(H.T.dot(H)).dot(H.T).dot(rsdu)
    X = X + delX
    #print ("Iteration", k+1)
    #print("Jacobian:")
    #print(H)
    #print("Residue:", rsdu.T, "\n")
    #print("State:", X.T, "\n")
    k = k+1
'''
Euler lagrange solution
'''
L = L0
for i in range(0, 50):
    fi = partial_Lagrangian(L, Z, collision)
    H = hessian_lagrangian(L, Z, collision)
    L = L - svdinv(H).dot(fi)
    if np.linalg.norm(partial_Lagrangian(L, Z, collision))< 0.001:
        break
'''

## cnn models

# get the model

def get_model(n_inputs, n_outputs):
	model = Sequential()
	model.add(Dense(100, input_dim=n_inputs, kernel_initializer='he_uniform', activation='relu'))
	model.add(Dense(n_outputs))
	model.compile(loss=tf.keras.metrics.mean_squared_error, optimizer='adam')
	return model

def evaluate_model(X, y):
	results = list()
	n_inputs, n_outputs = X.shape[1], y.shape[1]
	# define evaluation procedure
	cv = RepeatedKFold(n_splits=10, n_repeats=3, random_state=1)
	# enumerate folds
	for train_ix, test_ix in cv.split(X):
		# prepare data
		X_train, X_test = X[train_ix], X[test_ix]
		y_train, y_test = y[train_ix], y[test_ix]
		# define model
		model = get_model(n_inputs, n_outputs)
		# fit model
		model.fit(X_train, y_train, verbose=0, epochs=100)
		# evaluate model on test set
		mae = model.evaluate(X_test, y_test, verbose=0)
		# store result
		print('>%.3f' % mae)
		results.append(mae)
	return results




X = data[data.columns.values[0:6]]
y = data[data.columns.values[12]]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 123)

xgb_r = xgb.XGBRegressor(booster = 'gbtree', n_estimators = 10, seed = 123)

# Fitting the model
xgb_r.fit(X_train, y_train)
# Predict the model
y_hat = xgb_r.predict(X_test)
  
# RMSE Computation
rmse = np.sqrt(MSE(y_test, y_hat))
print("RMSE : % f" %(rmse))